name: CI

on: [ push, pull_request ]

env:
  # Enable format attributes in ncurses headers
  # Enable fortified memory/string handling
  CPPFLAGS: -DGCC_PRINTF -DGCC_SCANF -D_FORTIFY_SOURCE=2

jobs:
  build-ubuntu-latest-minimal-gcc:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install Dependencies
      run: sudo apt-get install libncursesw5-dev
    - name: Bootstrap
      run: ./autogen.sh
    - name: Configure
      run: ./configure --enable-werror --enable-linux-affinity --disable-unicode --without-sensors
    - name: Enable compatibility modes
      run: |
        sed -i 's/#define HAVE_FSTATAT 1/#undef HAVE_FSTATAT/g' config.h
        sed -i 's/#define HAVE_OPENAT 1/#undef HAVE_OPENAT/g' config.h
        sed -i 's/#define HAVE_READLINKAT 1/#undef HAVE_READLINKAT/g' config.h
    - name: Build
      run: make -k
    - name: Distcheck
      run: make distcheck DISTCHECK_CONFIGURE_FLAGS="--enable-werror --enable-linux-affinity --disable-unicode --without-sensors"

  build-ubuntu-latest-minimal-clang:
    runs-on: ubuntu-latest
    env:
      CC: clang-11
    steps:
    - uses: actions/checkout@v2
    - name: install clang repo
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key 2>/dev/null | sudo apt-key add -
        sudo add-apt-repository 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-11 main' -y
        sudo apt-get update -q
    - name: Install Dependencies
      run: sudo apt-get install clang-11 libncursesw5-dev
    - name: Bootstrap
      run: ./autogen.sh
    - name: Configure
      run: ./configure --enable-werror --enable-linux-affinity --disable-unicode --without-sensors
    - name: Build
      run: make -k
    - name: Distcheck
      run: make distcheck DISTCHECK_CONFIGURE_FLAGS="--enable-werror --enable-linux-affinity --disable-unicode --without-sensors"

  build-ubuntu-latest-full-featured-gcc:
    runs-on: ubuntu-latest
    # Enable LTO, might trigger additional warnings on advanced inlining
    env:
      CFLAGS: -O3 -g -flto
      LDFLAGS: -O3 -g -flto
    steps:
    - uses: actions/checkout@v2
    - name: Install Dependencies
      run: sudo apt-get install libncursesw5-dev libhwloc-dev libnl-3-dev libnl-genl-3-dev libsensors4-dev libcap-dev
    - name: Bootstrap
      run: ./autogen.sh
    - name: Configure
      run: ./configure --enable-werror --enable-openvz --enable-vserver --enable-ancient-vserver --enable-unicode --enable-hwloc --enable-setuid --enable-delayacct --with-sensors --with-capabilities
    - name: Build
      run: make -k
    - name: Distcheck
      run: make distcheck DISTCHECK_CONFIGURE_FLAGS='--enable-werror --enable-openvz --enable-vserver --enable-ancient-vserver --enable-unicode --enable-hwloc --enable-setuid --enable-delayacct --with-sensors --with-capabilities'

  build-ubuntu-latest-full-featured-clang:
    runs-on: ubuntu-latest
    env:
      CC: clang-11
    steps:
    - uses: actions/checkout@v2
    - name: install clang repo
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key 2>/dev/null | sudo apt-key add -
        sudo add-apt-repository 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-11 main' -y
        sudo apt-get update -q
    - name: Install Dependencies
      run: sudo apt-get install clang-11 libncursesw5-dev libhwloc-dev libnl-3-dev libnl-genl-3-dev libsensors4-dev libcap-dev
    - name: Bootstrap
      run: ./autogen.sh
    - name: Configure
      run: ./configure --enable-werror --enable-openvz --enable-vserver --enable-ancient-vserver --enable-unicode --enable-hwloc --enable-setuid --enable-delayacct --with-sensors --with-capabilities
    - name: Build
      run: make -k
    - name: Distcheck
      run: make distcheck DISTCHECK_CONFIGURE_FLAGS='--enable-werror --enable-openvz --enable-vserver --enable-ancient-vserver --enable-unicode --enable-hwloc --enable-setuid --enable-delayacct --with-sensors --with-capabilities'

  build-ubuntu-latest-clang-analyzer:
    runs-on: ubuntu-latest
    env:
      CC: clang-11
    steps:
    - uses: actions/checkout@v2
    - name: install clang repo
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key 2>/dev/null | sudo apt-key add -
        sudo add-apt-repository 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-11 main' -y
        sudo apt-get update -q
    - name: Install Dependencies
      run: sudo apt-get install clang-11 clang-tools-11 libncursesw5-dev libhwloc-dev libnl-3-dev libnl-genl-3-dev libsensors4-dev libcap-dev
    - name: Bootstrap
      run: ./autogen.sh
    - name: Configure
      run: scan-build-11 -analyze-headers --status-bugs ./configure --enable-debug --enable-werror --enable-openvz --enable-vserver --enable-ancient-vserver --enable-unicode --enable-hwloc --enable-setuid --enable-delayacct --with-sensors --with-capabilities
    - name: Build
      run: scan-build-11 -analyze-headers --status-bugs make -j"$(nproc)"

  build-macos-latest-clang:
    runs-on: macOS-latest
    env:
      CC: clang
    steps:
    - uses: actions/checkout@v2
    - name: Install Dependencies
      run: brew install automake
    - name: Bootstrap
      run: ./autogen.sh
    - name: Configure
      run: ./configure --enable-werror
    - name: Build
      run: make -k
    - name: Distcheck
      run: make distcheck DISTCHECK_CONFIGURE_FLAGS="--enable-werror"

  build-ubuntu-latest-s390x-cross-gcc:
    # ubuntu-20.04 is minimum version to build ncurses
    runs-on: ubuntu-20.04
    # Enable LTO, might trigger additional warnings on advanced inlining
    env:
      CFLAGS: -O3 -g -flto
      LDFLAGS: -O3 -g -flto
    steps:
    - uses: actions/checkout@v2
    - name: Install Cross Compile Toolchain
      run: sudo apt-get install gcc-s390x-linux-gnu bison flex wget
    - name: Create Temporary Source and Build Directories
      run: mkdir "${{runner.temp}}/s390x-src" "${{runner.temp}}/s390x-build"
    - name: Build ncurses
      working-directory: ${{runner.temp}}/s390x-src
      env:
        S390X_BUILD: ${{runner.temp}}/s390x-build
      run: |
        wget https://ftp.gnu.org/pub/gnu/ncurses/ncurses-6.2.tar.gz
        tar xf ncurses-6.2.tar.gz
        cd ncurses-6.2
        ./configure --host="s390x-linux-gnu" --prefix="${S390X_BUILD}" CFLAGS="-g" LDFLAGS="-g" --without-cxx --without-cxx-binding --without-ada --without-manpages --without-progs --without-tack --without-tests --without-curses-h --without-pkg-config --without-shared --without-debug --without-develop --without-dlsym --without-gpm --without-sysmouse --enable-widec --with-default-terminfo-dir=/usr/share/terminfo --with-terminfo-dirs=/usr/share/terminfo:/lib/terminfo:/usr/local/share/terminfo --with-fallbacks="screen linux vt100 xterm"
        make install
    - name: Build lm-sensors
      working-directory: ${{runner.temp}}/s390x-src
      env:
        S390X_BUILD: ${{runner.temp}}/s390x-build
      run: |
        wget https://github.com/lm-sensors/lm-sensors/archive/V3-6-0.tar.gz
        tar xf V3-6-0.tar.gz
        cd lm-sensors-3-6-0
        make CC="s390x-linux-gnu-gcc" CFLAGS="-g" LDFLAGS="-g" DESTDIR="${S390X_BUILD}/lm-sensors" install
    - name: Bootstrap
      run: ./autogen.sh
    - name: Configure
      env:
        S390X_BUILD: ${{runner.temp}}/s390x-build
      run: |
        export PATH=${S390X_BUILD}/bin:$PATH
        ./configure --host="s390x-linux-gnu" CFLAGS="-I${S390X_BUILD}/lm-sensors/usr/local/include" LDFLAGS="-L${S390X_BUILD}/lm-sensors/usr/local/lib" PKG_CONFIG=false --enable-unicode --with-sensors --enable-werror
    - name: Build
      run: make -k

  whitespace_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: check-whitespaces
        run: git diff-tree --check $(git hash-object -t tree /dev/null) HEAD
